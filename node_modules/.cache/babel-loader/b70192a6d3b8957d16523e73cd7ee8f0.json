{"ast":null,"code":"import { useState, useContext } from 'react';\nimport axios from 'axios'; // Import hooks\n\nimport useUrlBuilder from './useUrlBuilder';\nexport default (({\n  method = 'GET',\n  url: _url,\n  params: _params = {},\n  headers: _headers = {},\n  options: _options = {}\n}) => {\n  const initialState = {\n    isFetching: false,\n    isError: false,\n    statusCode: null,\n    code: null,\n    message: null,\n    data: null\n  }; // Define state first\n\n  const [state, setState] = useState(initialState); // Define url\n\n  const url = useUrlBuilder(_url); // Define default arguments\n\n  const args = {\n    method,\n    url,\n    data: null,\n    params: {},\n    headers: {}\n  };\n  const options = {\n    authenticated: true,\n    authenticationPrefix: 'Bearer',\n    ..._options\n  }; // Define request headers\n\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    ..._headers\n  }; // Set params headers\n\n  args.headers = headers; // Define request send method\n  // $FlowFixMe\n\n  const send = (_args = {}, successCb = undefined, errorCb = undefined) => {\n    // send http request\n    // Set isFetching to true, for loading purpose\n    setState({ ...initialState,\n      isFetching: true\n    }); // send request to server\n\n    setTimeout(() => {\n      axios({\n        crossDomain: true,\n        // withCredentials: true, // to make express session id persistent\n        ...args,\n        ..._args\n      }).then(response => {\n        if (response.data) {\n          setState(prevState => ({ ...prevState,\n            statusCode: response.status,\n            data: response.data\n          }));\n          if (successCb) successCb(response.data);\n        }\n      }).catch(error => {\n        let statusCode = null;\n        let code = 'HTTPRequestError';\n        let message = 'HTTP Request Error';\n        let data = null;\n\n        if (error.response) {\n          statusCode = error.response.status;\n          data = error.response;\n        }\n\n        setState(prevState => ({ ...prevState,\n          isError: true,\n          statusCode,\n          code,\n          message,\n          data\n        }));\n        if (errorCb) errorCb({\n          statusCode,\n          code,\n          message\n        });\n      }).then(() => {\n        setState(prevState => ({ ...prevState,\n          isFetching: false\n        }));\n      });\n    }, 2000);\n  };\n\n  return [state, send];\n});","map":{"version":3,"sources":["/Users/shanengupta/Desktop/react-ocr/src/hooks/useAxios.js"],"names":["useState","useContext","axios","useUrlBuilder","method","url","_url","params","_params","headers","_headers","options","_options","initialState","isFetching","isError","statusCode","code","message","data","state","setState","args","authenticated","authenticationPrefix","Accept","send","_args","successCb","undefined","errorCb","setTimeout","crossDomain","then","response","prevState","status","catch","error"],"mappings":"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","sourcesContent":["import { useState, useContext } from 'react'\nimport axios from 'axios'\n\n// Import hooks\nimport useUrlBuilder from './useUrlBuilder'\n\nexport default ({\n  method = 'GET',\n  url: _url,\n  params: _params = {},\n  headers: _headers = {},\n  options: _options = {},\n}) => {\n  const initialState = {\n    isFetching: false,\n    isError: false,\n    statusCode: null,\n    code: null,\n    message: null,\n    data: null,\n  }\n\n  // Define state first\n  const [state, setState] = useState(initialState)\n\n  // Define url\n  const url = useUrlBuilder(_url)\n\n  // Define default arguments\n  const args = {\n    method,\n    url,\n    data: null,\n    params: {},\n    headers: {},\n  }\n\n  const options = {\n    authenticated: true,\n    authenticationPrefix: 'Bearer',\n    ..._options,\n  }\n\n  // Define request headers\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    ..._headers,\n  }\n\n  // Set params headers\n  args.headers = headers\n\n  // Define request send method\n  // $FlowFixMe\n  const send = (_args = {}, successCb = undefined, errorCb = undefined) => {\n    // send http request\n    // Set isFetching to true, for loading purpose\n    setState({\n      ...initialState,\n      isFetching: true,\n    })\n\n    // send request to server\n    setTimeout(() => {\n      axios({\n        crossDomain: true,\n        // withCredentials: true, // to make express session id persistent\n        ...args,\n        ..._args,\n      })\n        .then((response) => {\n          if (response.data) {\n            setState((prevState) => ({\n              ...prevState,\n              statusCode: response.status,\n              data: response.data,\n            }))\n\n            if (successCb) successCb(response.data)\n          }\n        })\n        .catch((error) => {\n          let statusCode = null\n          let code = 'HTTPRequestError'\n          let message = 'HTTP Request Error'\n          let data = null\n\n          if (error.response) {\n            statusCode = error.response.status\n            data = error.response\n          }\n\n          setState((prevState) => ({\n            ...prevState,\n            isError: true,\n            statusCode,\n            code,\n            message,\n            data,\n          }))\n\n          if (errorCb) errorCb({ statusCode, code, message })\n        })\n        .then(() => {\n          setState((prevState) => ({\n            ...prevState,\n            isFetching: false,\n          }))\n        })\n    }, 2000)\n  }\n\n  return [state, send]\n}\n"]},"metadata":{},"sourceType":"module"}