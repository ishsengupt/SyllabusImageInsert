{"ast":null,"code":"var _jsxFileName = \"/Users/shanengupta/Desktop/react-ocr/src/components/FileUpload.js\";\nimport React, { useContext } from \"react\";\nimport { Upload, message } from \"antd\";\nimport UploadedImages from \"../contexts/UploadedImages\";\nimport useAxios from \"../hooks/useAxios\";\nimport useUrlBuilder from \"../hooks/useUrlBuilder\";\nimport { vision } from \"../env\";\nconst {\n  Dragger\n} = Upload;\n\nconst FileUpload = () => {\n  const uploaded = useContext(UploadedImages);\n  const {\n    loading,\n    setUploadedImages\n  } = uploaded;\n  const [ocrState, ocrSend] = useAxios({\n    url: `images:annotate`,\n    method: \"POST\"\n  });\n  const endpoint = \"https://vision.googleapis.com/v1/images:annotate\";\n\n  const preFormat = arr => {\n    return [arr[0].x, arr[0].y, arr[1].x - arr[0].x, arr[3].y - arr[0].y];\n  };\n\n  const tidyResults = raw => {\n    let results = {\n      texts: [],\n      boundings: []\n    };\n    raw.map((item, index) => {\n      if (index > 0) {\n        results.texts.push(item.description);\n        results.boundings.push(preFormat(item.boundingPoly.vertices));\n      }\n    });\n    return results;\n  };\n\n  const messageKey = \"loadingMsg\";\n\n  const onLoading = () => {\n    message.loading({\n      content: \"Analyzing image..\",\n      duration: 0,\n      key: messageKey\n    });\n  };\n\n  const props = {\n    name: \"file\",\n    multiple: false,\n    accept: \".png,.jpeg,.jpg\",\n    showUploadList: false,\n    disabled: loading,\n    beforeUpload: file => {\n      console.log(vision.api_key);\n      onLoading(true); // onLoading(false)\n\n      setUploadedImages({\n        loading: true\n      });\n      const reader = new FileReader();\n\n      reader.onload = e => {\n        const base64 = e.target.result.toString().replace(/^data:(.*,)?/, \"\");\n        ocrSend({\n          url: endpoint,\n          params: {\n            key: vision.api_key\n          },\n          data: {\n            requests: [{\n              image: {\n                content: base64\n              },\n              features: [{\n                type: \"TEXT_DETECTION\"\n              }]\n            }]\n          }\n        }, res => {\n          console.log(res);\n          console.log(res.responses[0].fullTextAnnotation);\n          setUploadedImages({\n            loading: false,\n            base64,\n            ocrResultsRaw: res.responses[0],\n            ocrResults: tidyResults(res.responses[0].textAnnotations),\n            createdAt: new Date()\n          });\n          console.log(new Date());\n          message.success({\n            content: `action done successfully.`,\n            key: messageKey\n          });\n        }, e => {\n          console.log(e);\n          setUploadedImages({\n            loading: false\n          });\n          message.error({\n            content: `Ops, Something wrong`,\n            key: messageKey\n          });\n        });\n      };\n\n      reader.readAsDataURL(file); // Prevent upload\n\n      return false;\n    } // action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n    // onChange(info) {\n    //   const { status } = info.file;\n    //   if (status !== 'uploading') {\n    //     console.log(info.file, info.fileList);\n    //   }\n    //   if (status === 'done') {\n    //     message.success(`${info.file.name} file uploaded successfully.`);\n    //   } else if (status === 'error') {\n    //     message.error(`${info.file.name} file upload failed.`);\n    //   }\n    // },\n\n  };\n  return /*#__PURE__*/React.createElement(Dragger, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"ant-upload-drag-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, \"Inbox\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"ant-upload-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, \"Click or drag image to this area to start analyze\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"ant-upload-hint\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, \"Only accept jpeg,jpg and png files.\"));\n};\n\nexport default FileUpload;","map":{"version":3,"sources":["/Users/shanengupta/Desktop/react-ocr/src/components/FileUpload.js"],"names":["React","useContext","Upload","message","UploadedImages","useAxios","useUrlBuilder","vision","Dragger","FileUpload","uploaded","loading","setUploadedImages","ocrState","ocrSend","url","method","endpoint","preFormat","arr","x","y","tidyResults","raw","results","texts","boundings","map","item","index","push","description","boundingPoly","vertices","messageKey","onLoading","content","duration","key","props","name","multiple","accept","showUploadList","disabled","beforeUpload","file","console","log","api_key","reader","FileReader","onload","e","base64","target","result","toString","replace","params","data","requests","image","features","type","res","responses","fullTextAnnotation","ocrResultsRaw","ocrResults","textAnnotations","createdAt","Date","success","error","readAsDataURL"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { Upload, message } from \"antd\";\nimport UploadedImages from \"../contexts/UploadedImages\";\nimport useAxios from \"../hooks/useAxios\";\nimport useUrlBuilder from \"../hooks/useUrlBuilder\";\nimport { vision } from \"../env\";\nconst { Dragger } = Upload;\n\nconst FileUpload = () => {\n  const uploaded = useContext(UploadedImages);\n  const { loading, setUploadedImages } = uploaded;\n\n  const [ocrState, ocrSend] = useAxios({\n    url: `images:annotate`,\n    method: \"POST\"\n  });\n\n  const endpoint = \"https://vision.googleapis.com/v1/images:annotate\";\n\n  const preFormat = arr => {\n    return [arr[0].x, arr[0].y, arr[1].x - arr[0].x, arr[3].y - arr[0].y];\n  };\n\n  const tidyResults = raw => {\n    let results = {\n      texts: [],\n      boundings: []\n    };\n    raw.map((item, index) => {\n      if (index > 0) {\n        results.texts.push(item.description);\n        results.boundings.push(preFormat(item.boundingPoly.vertices));\n      }\n    });\n    return results;\n  };\n\n  const messageKey = \"loadingMsg\";\n\n  const onLoading = () => {\n    message.loading({\n      content: \"Analyzing image..\",\n      duration: 0,\n      key: messageKey\n    });\n  };\n\n  const props = {\n    name: \"file\",\n    multiple: false,\n    accept: \".png,.jpeg,.jpg\",\n    showUploadList: false,\n    disabled: loading,\n    beforeUpload: file => {\n      console.log(vision.api_key);\n      onLoading(true);\n      // onLoading(false)\n\n      setUploadedImages({\n        loading: true\n      });\n      const reader = new FileReader();\n\n      reader.onload = e => {\n        const base64 = e.target.result.toString().replace(/^data:(.*,)?/, \"\");\n        ocrSend(\n          {\n            url: endpoint,\n            params: {\n              key: vision.api_key\n            },\n            data: {\n              requests: [\n                {\n                  image: {\n                    content: base64\n                  },\n                  features: [\n                    {\n                      type: \"TEXT_DETECTION\"\n                    }\n                  ]\n                }\n              ]\n            }\n          },\n          res => {\n            console.log(res);\n            console.log(res.responses[0].fullTextAnnotation);\n            setUploadedImages({\n              loading: false,\n              base64,\n              ocrResultsRaw: res.responses[0],\n              ocrResults: tidyResults(res.responses[0].textAnnotations),\n              createdAt: new Date()\n            });\n            console.log(new Date());\n            message.success({\n              content: `action done successfully.`,\n              key: messageKey\n            });\n          },\n          e => {\n            console.log(e);\n            setUploadedImages({\n              loading: false\n            });\n            message.error({\n              content: `Ops, Something wrong`,\n              key: messageKey\n            });\n          }\n        );\n      };\n      reader.readAsDataURL(file);\n\n      // Prevent upload\n      return false;\n    }\n    // action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n    // onChange(info) {\n    //   const { status } = info.file;\n    //   if (status !== 'uploading') {\n    //     console.log(info.file, info.fileList);\n    //   }\n    //   if (status === 'done') {\n    //     message.success(`${info.file.name} file uploaded successfully.`);\n    //   } else if (status === 'error') {\n    //     message.error(`${info.file.name} file upload failed.`);\n    //   }\n    // },\n  };\n\n  return (\n    <Dragger {...props}>\n      <p className=\"ant-upload-drag-icon\">Inbox</p>\n      <p className=\"ant-upload-text\">\n        Click or drag image to this area to start analyze\n      </p>\n      <p className=\"ant-upload-hint\">Only accept jpeg,jpg and png files.</p>\n    </Dragger>\n  );\n};\n\nexport default FileUpload;\n"]},"metadata":{},"sourceType":"module"}